"""Initial Migration

Revision ID: 086eed16acf4
Revises: 
Create Date: 2025-04-01 12:57:03.723786

"""
from alembic import op
import sqlalchemy as sa


# revision identifiers, used by Alembic.
revision = '086eed16acf4'
down_revision = None
branch_labels = None
depends_on = None


def upgrade():
    # ### commands auto generated by Alembic - please adjust! ###
    op.create_table('task_locations',
    sa.Column('id', sa.Integer(), nullable=False),
    sa.Column('latitude', sa.Numeric(precision=9, scale=6), nullable=False, comment='Latitude coordinate'),
    sa.Column('longitude', sa.Numeric(precision=9, scale=6), nullable=False, comment='Longitude coordinate'),
    sa.Column('country', sa.String(length=100), nullable=False),
    sa.Column('state', sa.String(length=100), nullable=False),
    sa.Column('city', sa.String(length=100), nullable=False),
    sa.Column('area', sa.String(length=100), nullable=True, comment='Optional area or neighborhood'),
    sa.Column('created_at', sa.DateTime(), server_default=sa.text('now()'), nullable=True),
    sa.Column('updated_at', sa.DateTime(), server_default=sa.text('now()'), nullable=True),
    sa.PrimaryKeyConstraint('id', name=op.f('pk_task_locations'))
    )
    op.create_table('users',
    sa.Column('id', sa.Integer(), nullable=False),
    sa.Column('name', sa.String(length=150), nullable=False),
    sa.Column('email', sa.String(length=150), nullable=False),
    sa.Column('password', sa.String(length=255), nullable=True),
    sa.Column('phone', sa.String(length=15), nullable=True, comment='Stored in E.164 format'),
    sa.Column('image', sa.String(length=255), nullable=True, comment='URL to profile image'),
    sa.Column('otp_code', sa.String(length=6), nullable=True),
    sa.Column('otp_expires_at', sa.DateTime(), nullable=True),
    sa.Column('otp_last_sent', sa.DateTime(), nullable=True),
    sa.Column('is_verified', sa.Boolean(), nullable=False),
    sa.Column('reset_token', sa.String(length=64), nullable=True),
    sa.Column('reset_expires_at', sa.DateTime(), nullable=True),
    sa.Column('auth_provider', sa.String(length=50), server_default='email', nullable=False, comment="Authentication provider; defaults to 'email' for email/password login"),
    sa.Column('created_at', sa.DateTime(), server_default=sa.text('now()'), nullable=True),
    sa.Column('updated_at', sa.DateTime(), server_default=sa.text('now()'), nullable=True),
    sa.PrimaryKeyConstraint('id', name=op.f('pk_users'))
    )
    with op.batch_alter_table('users', schema=None) as batch_op:
        batch_op.create_index('idx_verification', ['otp_code', 'otp_expires_at'], unique=False)
        batch_op.create_index(batch_op.f('ix_users_email'), ['email'], unique=True)
        batch_op.create_index(batch_op.f('ix_users_name'), ['name'], unique=False)

    op.create_table('tasks',
    sa.Column('id', sa.Integer(), nullable=False),
    sa.Column('user_id', sa.Integer(), nullable=False, comment='Task creator'),
    sa.Column('title', sa.String(length=255), nullable=False),
    sa.Column('description', sa.Text(), nullable=False),
    sa.Column('work_mode', sa.String(length=20), nullable=False, comment="Either 'remote' or 'physical'"),
    sa.Column('location_id', sa.Integer(), nullable=True, comment='Required if work_mode is physical'),
    sa.Column('budget', sa.Numeric(precision=10, scale=2), nullable=False),
    sa.Column('schedule_type', sa.String(length=20), nullable=False, comment="Scheduling type: 'specific_day', 'before_day', or 'flexible'"),
    sa.Column('specific_date', sa.DateTime(), nullable=True, comment="Exact date if schedule_type is 'specific_day'"),
    sa.Column('deadline_date', sa.DateTime(), nullable=True, comment="Deadline date if schedule_type is 'before_day'"),
    sa.Column('preferred_time', sa.Time(), nullable=True, comment="Preferred time if schedule_type is 'flexible'"),
    sa.Column('status', sa.String(length=20), nullable=False, comment="Task status: e.g., 'open', 'in_progress', 'completed', 'cancelled'"),
    sa.Column('category', sa.String(length=255), nullable=True, comment='Categorises each task to specific tags'),
    sa.Column('created_at', sa.DateTime(), server_default=sa.text('now()'), nullable=True),
    sa.Column('updated_at', sa.DateTime(), server_default=sa.text('now()'), nullable=True),
    sa.ForeignKeyConstraint(['location_id'], ['task_locations.id'], name=op.f('fk_tasks_location_id_task_locations'), ondelete='SET NULL'),
    sa.ForeignKeyConstraint(['user_id'], ['users.id'], name=op.f('fk_tasks_user_id_users'), ondelete='CASCADE'),
    sa.PrimaryKeyConstraint('id', name=op.f('pk_tasks'))
    )
    op.create_table('user_info',
    sa.Column('id', sa.Integer(), nullable=False),
    sa.Column('user_id', sa.Integer(), nullable=False),
    sa.Column('tagline', sa.String(length=255), nullable=True, comment="User's short description"),
    sa.Column('bio', sa.Text(), nullable=True, comment="User's biography"),
    sa.Column('rating', sa.Float(), nullable=False, comment="User's rating (0.0 - 5.0)"),
    sa.Column('completion_rate', sa.Float(), nullable=False, comment='Task completion rate (0-100%)'),
    sa.Column('created_at', sa.DateTime(), server_default=sa.text('now()'), nullable=True),
    sa.Column('updated_at', sa.DateTime(), server_default=sa.text('now()'), nullable=True),
    sa.ForeignKeyConstraint(['user_id'], ['users.id'], name=op.f('fk_user_info_user_id_users'), ondelete='CASCADE'),
    sa.PrimaryKeyConstraint('id', name=op.f('pk_user_info'))
    )
    with op.batch_alter_table('user_info', schema=None) as batch_op:
        batch_op.create_index('idx_user_info_completion', ['completion_rate'], unique=False)
        batch_op.create_index('idx_user_info_rating', ['rating'], unique=False)
        batch_op.create_index('idx_user_info_user', ['user_id'], unique=False)
        batch_op.create_index(batch_op.f('ix_user_info_user_id'), ['user_id'], unique=True)

    op.create_table('bids',
    sa.Column('id', sa.Integer(), nullable=False),
    sa.Column('task_id', sa.Integer(), nullable=False),
    sa.Column('user_id', sa.Integer(), nullable=False),
    sa.Column('amount', sa.Numeric(precision=10, scale=2), nullable=False),
    sa.Column('message', sa.Text(), nullable=True),
    sa.Column('status', sa.String(length=20), nullable=False, comment="Bid status: e.g., 'pending', 'accepted', 'rejected'"),
    sa.Column('created_at', sa.DateTime(), server_default=sa.text('now()'), nullable=True),
    sa.Column('updated_at', sa.DateTime(), server_default=sa.text('now()'), nullable=True),
    sa.ForeignKeyConstraint(['task_id'], ['tasks.id'], name=op.f('fk_bids_task_id_tasks'), ondelete='CASCADE'),
    sa.ForeignKeyConstraint(['user_id'], ['users.id'], name=op.f('fk_bids_user_id_users'), ondelete='CASCADE'),
    sa.PrimaryKeyConstraint('id', name=op.f('pk_bids'))
    )
    op.create_table('task_assignments',
    sa.Column('id', sa.Integer(), nullable=False),
    sa.Column('task_id', sa.Integer(), nullable=False),
    sa.Column('task_giver', sa.Integer(), nullable=False, comment='User who posted the task'),
    sa.Column('task_doer', sa.Integer(), nullable=False, comment='User assigned to perform the task'),
    sa.Column('agreed_price', sa.Numeric(precision=10, scale=2), nullable=False),
    sa.Column('conversation_id', sa.Integer(), nullable=True, comment='Optional reference to a conversation for messaging'),
    sa.Column('status', sa.String(length=20), nullable=False, comment="Assignment status: e.g., 'assigned', 'in_progress', 'completed', 'cancelled'"),
    sa.Column('created_at', sa.DateTime(), server_default=sa.text('now()'), nullable=True),
    sa.Column('updated_at', sa.DateTime(), server_default=sa.text('now()'), nullable=True),
    sa.ForeignKeyConstraint(['task_doer'], ['users.id'], name=op.f('fk_task_assignments_task_doer_users'), ondelete='CASCADE'),
    sa.ForeignKeyConstraint(['task_giver'], ['users.id'], name=op.f('fk_task_assignments_task_giver_users'), ondelete='CASCADE'),
    sa.ForeignKeyConstraint(['task_id'], ['tasks.id'], name=op.f('fk_task_assignments_task_id_tasks'), ondelete='CASCADE'),
    sa.PrimaryKeyConstraint('id', name=op.f('pk_task_assignments'))
    )
    # ### end Alembic commands ###


def downgrade():
    # ### commands auto generated by Alembic - please adjust! ###
    op.drop_table('task_assignments')
    op.drop_table('bids')
    with op.batch_alter_table('user_info', schema=None) as batch_op:
        batch_op.drop_index(batch_op.f('ix_user_info_user_id'))
        batch_op.drop_index('idx_user_info_user')
        batch_op.drop_index('idx_user_info_rating')
        batch_op.drop_index('idx_user_info_completion')

    op.drop_table('user_info')
    op.drop_table('tasks')
    with op.batch_alter_table('users', schema=None) as batch_op:
        batch_op.drop_index(batch_op.f('ix_users_name'))
        batch_op.drop_index(batch_op.f('ix_users_email'))
        batch_op.drop_index('idx_verification')

    op.drop_table('users')
    op.drop_table('task_locations')
    # ### end Alembic commands ###
